name: Django CI/CD with Poetry

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run linting with flake8
      run: |
        poetry run flake8 config network_node --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 config network_node --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: poetry run black --check config network_node

    - name: Check imports with isort
      run: poetry run isort --check-only config network_node

    - name: Check Django settings
      env:
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        SECRET_KEY: test-secret-key-for-ci
      run: poetry run python manage.py check

    - name: Run migrations
      env:
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        SECRET_KEY: test-secret-key-for-ci
      run: poetry run python manage.py migrate

    - name: Run tests with coverage
      env:
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        SECRET_KEY: test-secret-key-for-ci
      run: |
        poetry run pytest --cov=network_node --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker-compose build

    - name: Start services
      run: docker-compose up -d

    - name: Wait for services
      run: sleep 15

    - name: Check Django
      run: docker-compose exec -T web python manage.py check

    - name: Run migrations in Docker
      run: docker-compose exec -T web python manage.py migrate

    - name: Run tests in Docker
      run: docker-compose exec -T web poetry run pytest -vv

    - name: Stop services
      run: docker-compose down

    - name: Show logs on failure
      if: failure()
      run: docker-compose logs

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run Black
      run: poetry run black --check config network_node

    - name: Run isort
      run: poetry run isort --check-only config network_node

    - name: Run flake8
      run: poetry run flake8 config network_node
